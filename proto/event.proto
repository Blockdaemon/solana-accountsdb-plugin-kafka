syntax = "proto3";

package blockdaemon.solana.accountsdb_plugin_kafka.types;

message UpdateAccountEvent {
  // The slot number when this update was emitted.
  uint64 slot = 1;

  // The Pubkey for the account.
  bytes pubkey = 2;

  // The lamports held by the account.
  uint64 lamports = 3;

  // The Pubkey of the owner program account.
  bytes owner = 4;

  // This account's data contains a loaded program.
  bool executable = 5;

  // The epoch at which this account will next owe rent.
  uint64 rent_epoch = 6;

  // The data held in this account.
  bytes data = 7;

  // A global monotonically increasing atomic number, which can be used
  // to tell the order of the account update. For example, when an
  // account is updated in the same slot multiple times, the update
  // with higher write_version should supersede the one with lower
  // write_version.
  uint64 write_version = 8;
}

message SlotStatusEvent {
  uint64 slot = 1;

  uint64 parent = 2;

  SlotStatus status = 3;
}

enum SlotStatus {
  // The highest slot of the heaviest fork processed by the node. Ledger state at this slot is
  // not derived from a confirmed or finalized block, but if multiple forks are present, is from
  // the fork the validator believes is most likely to finalize.
  Processed = 0;

  // The highest slot having reached max vote lockout.
  Rooted = 1;

  // The highest slot that has been voted on by supermajority of the cluster, ie. is confirmed.
  Confirmed = 2;
}
